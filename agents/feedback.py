import re
import requests
import json
from state import State
from langchain_ollama import OllamaLLM
from config import FEEDBACK_MODEL

EVAL_PROMPT = """
You are the Feedback Agent. 
Evaluate if the last API response is valid and answers the user query.

Rules:
1. Valid format = an actual API answer (JSON, XML, plain text).  
   Invalid = code examples, explanations, or meta-descriptions.  
   → If invalid, reformulate the user query to obtain a valid API-style answer.
2. If response is just a URL → fetch it and re-evaluate the result.
3. If format is valid but content does NOT address the query → move to next file.
4. If format is valid AND relevant → accept.

Reply ONLY in JSON:
- {"action": "accept"}
- {"action": "fetch_url"}
- {"action": "next_file"}
- {"action": "reformulate", "new_query": "<better user query>"}
"""

class FeedbackAgent:
    """
    FeedbackAgent evaluates the last API response generated by the ExecutorAgent
    and decides the next step in the multi-agent pipeline. It can accept the output,
    fetch a URL, move to the next API, or reformulate the user query.
    """

    def __init__(self, llm_model: str = FEEDBACK_MODEL):
        self.llm = OllamaLLM(model=llm_model)

    def run(self, state: State) -> State:
        print("Running FeedbackAgent...")
        last_response = state.get("last_response")
        current_index = state.get("current_index", 0)
        candidate_files = state.get("candidate_files", []) or []

        if not last_response:
            next_index = min(current_index + 1, len(candidate_files) - 1)
            return {**state,
                    "current_index": next_index,
                    "last_response": None,
                    "api_spec_yaml": None,
                    "system_message": None,
                    "fetched_url": False}

        user_query = state.get("user_query", "")
        eval_input = f"User query: {user_query}\nAPI response: {last_response}"

        try:
            raw_output = self.llm.invoke(EVAL_PROMPT + "\n\n" + eval_input)
        except Exception as e:
            return {**state, "error": f"FeedbackAgent LLM error: {e}"}

        try:
            decision = json.loads(raw_output.strip().split("\n")[-1])
        except Exception:
            return {**state, "error": f"Invalid feedback output: {raw_output}"}

        action = decision.get("action")

        if action == "accept":
            print("Output accepted by FeedbackAgent")
            state["accepted"] = True
            return state

        elif action == "fetch_url":
            if not state.get("fetched_url", False):
                url_match = re.search(r"(https?://[^\s\"']+)", str(last_response))
                if url_match:
                    url = url_match.group(1)
                    state["fetched_url"] = True
                    try:
                        resp = requests.get(url, timeout=10)
                        try:
                            data = resp.json()
                            state["last_response"] = json.dumps(data, indent=2, ensure_ascii=False)
                        except ValueError:
                            state["last_response"] = resp.text
                        print(f"\nFetched URL response:\n{state['last_response']}\n")
                        return self.run(state)
                    except Exception as e:
                        return {**state, "error": f"Failed to fetch {url}: {e}"}

        elif action == "next_file":
            print("Trying next API")
            next_index = min(current_index + 1, len(candidate_files) - 1)
            return {**state,
                    "current_index": next_index,
                    "last_response": None,
                    "api_spec_yaml": None,
                    "system_message": None,
                    "fetched_url": False}

        elif action == "reformulate":
            print("Reformulating user query")
            new_query = decision.get("new_query", user_query)
            return {**state,
                    "user_query": new_query,
                    "retrieved": False,
                    "last_response": None,
                    "api_spec_yaml": None,
                    "system_message": None,
                    "fetched_url": False}

        else:
            return {**state,
                    "error": f"Unknown action from feedback: {decision}",
                    "fetched_url": False}
